#!/bin/bash
set -e

juju-log "########################################################################"
juju-log "##                                                                    ##"
juju-log "## Install MPOS	                                                ##"
juju-log "## Author: Brandon L. Clark <support@themindspot.com>                 ##"
juju-log "##                                                                    ##"
juju-log "## Description: This script will install the MPOS crypto currency     ##"
juju-log "## pool server.   Learn more at https://github.com/MPOS/php-mpos.     ##"
juju-log "##                                                                    ##"
juju-log "########################################################################"

##################################################################################
# Get 'config.yaml' settings.
##################################################################################

alerts_email=`config-get alerts_email`
mpos_user=`config-get mpos_user`
mpos_pass=`config-get mpos_pass`
rpc_port=`config-get rpc_port`
rpc_timeout=`config-get rpc_timeout`
pool_wallet=`config-get pool_wallet`
cpu_cores=`config-get cpu_cores`
coin_type=`config-get coin_type`
host_id=`config-get host_id`
db_name=`config-get db_name`
db_user=`config-get db_user`
db_pass=`config-get db_pass`
pool_target=`config-get pool_target`
block_hash=`config-get block_hash`
base_dir=`config-get base_dir`
db_port=``
coin_url=``
coin_target=``
coin_diff_change_target=``
payout_system=``
db_host=``
rpc_host=``

##################################################################################
# Get environment settings.
##################################################################################

RELEASE_VERSION=`lsb_release -sr`
MACHINE_TYPE=`uname -m`
host_id=``
MACHINE_ADDRESS='localhost'

# SALTS generate random 32 character alphanumeric string (upper and lowercase)
salt=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
salt2=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
salty=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)

#################################################################################
# General setup functions
#################################################################################

cd ${base_dir}

system_update(){
  juju-log " + Upgrading software packages... "
  apt-get -y update && apt-get -y upgrade
  juju-log "   Finished upgrading packages. "
}

finish_apt(){
  apt-get -y -f install
}

ppa_php(){
  add-apt-repository -y ppa:ondrej/php5-oldstable && apt-get -y update
  apt-get -y install php5 php5-gd php5-curl php5-cli php5-cgi php5-dev php5-fpm php5-memcached php5-mysqlnd
  finish_apt
}

get_mysql(){
  apt-get -y install mysql-server mysql-client
}

get_apache2(){
  apt-get -y install apache2 libapache2-mod-php5
}

lamp_package(){
  finish_apt
  debconf-set-selections <<< 'mysql-server mysql-server/root_password password '${db_pass}''
  debconf-set-selections <<< 'mysql-server mysql-server/root_password_again password '${db_pass}''
  #apt-get -y install lamp-server^ 
  #apt-get -y install php5-mysqlnd
  get_apache2 && get_mysql && ppa_php
}

easy_package(){
  rm /usr/bin/easy_install*
  rm /usr/local/bin/easy_install*
  curl -O http://python-distribute.org/distribute_setup.py
  sudo python distribute_setup.py
  rm distribute_setup.py
}

make_db(){
  sudo mysql -u root --password=${db_pass} --execute="create database ${db_name}"
}

base_dev(){
  juju-log " + Installing needed development packages... "
  apt-get -y install build-essential libcap2-bin git-core automake autoconf curl python-software-properties 
  finish_apt
  apt-get -y install libcurl4-gnutls-dev yasm libncurses5-dev pkg-config libtool libmemcached-dev libcrypto++-dev 
  finish_apt
  apt-get -y install python-zope.interface python-twisted python-twisted-web python-mysqldb python-dev python-setuptools python-memcache python-simplejson postfix memcached python-pylibmc
  finish_apt
  apt-get -y install sqlite3 postgresql libssl-dev libminiupnpc-dev libdb4.8:i386 libstdc++6:i386 libstdc++6 libdb5.1++-dev libqrencode-dev libminiupnpc-dev libcurl4-openssl-dev libdb5.1-dev 
  finish_apt 
  apt-get -y install libboost1.46-dev libboost-graph1.46-dev libboost-graph-dev libboost-graph-parallel1.46-dev libboost-graph-parallel-dev libboost-iostreams1.46-dev libboost-iostreams-dev libboost-math1.46-dev libboost-math-dev libboost-mpi1.46-dev libboost-mpi-dev libboost-mpi-python-dev libboost-program-options1.46-dev libboost-program-options-dev libboost-python1.46-dev libboost-python-dev libboost-regex1.46-dev libboost-regex-dev libboost-serialization1.46-dev libboost-serialization-dev libboost-signals1.46-dev libboost-signals-dev libboost-system1.46-dev libboost-system-dev libboost-test1.46-dev libboost-test-dev libboost-thread1.46-dev libboost-thread-dev libboost-wave1.46-dev libboost-wave-dev libboost-filesystem1.46-dev libboost-filesystem-dev libboost-date-time1.46-dev libboost-date-time-dev libboost-dev libboost-all-dev 
  finish_apt
  lamp_package
  easy_package
  finish_apt
  make_db
  juju-log "   Finished installing development packages. "

}

##################################################################################
# General crypto currency function.
##################################################################################

auth(){
  juju-log " + Setting coin .conf file..."
  mkdir /home/ubuntu/.${coin_type}
  cat > /home/ubuntu/.${coin_type}/${coin_type}.conf <<EOF
server=1
rpcport=${rpc_port}
rpctimeout=${rpc_timeout}
rpcuser=${mpos_user}
rpcpassword=${mpos_pass}
EOF
  chmod go-rwx /home/ubuntu/.${coin_type}/${coin_type}.conf
  juju-log "   Finishing user configuration."
}

#################################################################################
# bitcoind setup functions
#################################################################################

build_bitcoind(){
  cd bitcoin/src/
  make -f makefile.unix USE_UPNP=- 
  cp bitcoind /usr/bin/
  cd ../..
}

git_bitcoind(){
  juju-log " + Cloning bitcoind an building..."
  git clone https://github.com/bitcoin/bitcoin.git
  cd bitcoin
  git checkout v0.8.6
  cd ..
  build_bitcoind
  juju-log "   Finishing bitcoind!"
}

#################################################################################
# dogecoind setup functions
#################################################################################

build_dogecoind(){
  cd dogecoin/src/
  make -f makefile.unix USE_UPNP=-
  cp dogecoind /usr/bin/
  cd ../..
}

git_dogecoind(){
  juju-log " + Cloning dogecoind an building..."
  git clone https://github.com/dogecoin/dogecoin.git
  build_dogecoind
  juju-log "   Finishing dogecoind!"
}

#################################################################################
# litecoind setup functions
#################################################################################

build_litecoind(){
  cd litecoin/src/
  make -f makefile.unix USE_UPNP=-
  cp litecoind /usr/bin/
  cd ../..
}

git_litecoind(){
  juju-log " + Cloning litecoind and building..."
  git clone https://github.com/litecoin-project/litecoin.git
  build_litecoind
  juju-log "   Finishing litecoind!"
}

#################################################################################
# Stratum setup functions
#################################################################################

init_stratum(){
  cd stratum-mining
  twistd -y launcher.tac
  cd ..
}

edit_websocket(){
  sudo sed -i -e "s/autobahn/autobahn\.twisted/g" /usr/local/lib/python2.7/dist-packages/stratum-0.2.13-py2.7.egg/stratum/websocket_transport.py
}

config_stratum(){
  ##Backup daemons will be added only if additional cryptocoin charms are spawned.(SO is the goal)
  cp stratum-mining/conf/config_sample.py stratum-mining/conf/config.py
  cd stratum-mining/conf/
  sudo sed -i -e 's/set_valid_addresss_in_config!/'${pool_wallet}'/g' config.py					
  sudo sed -i -e "s/COINDAEMON_TRUSTED_PORT = [0-9]*[0-9]/COINDAEMON_TRUSTED_PORT = ${rpc_port}/g" config.py    
  sudo sed -i -e 's/user/'${mpos_user}'/g' config.py					
  sudo sed -i -e 's/somepassword/'${mpos_pass}'/g' config.py				 
  if [ ${coin_type} == "bitcoin" ]; then						
    sudo sed -i -e "s/COINDAEMON_ALGO = ['][a-z]*[a-z][']/COINDAEMON_ALGO = \'sha256d\'/g" config.py    
  elif [ ${coin_type} == "litecoin" ]; then						 
    sudo sed -i -e "s/COINDAEMON_ALGO = ['][a-z]*[a-z][']/COINDAEMON_ALGO = \'scrypt\'/g" config.py    
  elif [ ${coin_type} == "dogecoin" ]; then						 
    sudo sed -i -e "s/COINDAEMON_ALGO = ['][a-z]*[a-z][']/COINDAEMON_ALGO = \'scrypt\'/g" config.py    
  fi
  if [ ${coin_type} == "bitcoin" ]; then		
    sudo sed -i -e "s/COINDAEMON_TX = ['][a-z]*[a-z][']/COINDAEMON_TX = \'yes\'/g" config.py
  fi
  sudo sed -i -e "s/DB_MYSQL_DBNAME = ['][a-z]*[a-z][']/DB_MYSQL_DBNAME = '${db_name}'/g" config.py
  sudo sed -i -e "s/DB_MYSQL_USER = ['][a-z]*[a-z][']/DB_MYSQL_USER = '${db_user}'/g" config.py
  sudo sed -i -e 's/\*\*empty\*\*/'${db_pass}'/g' config.py				
  sudo sed -i -e 's/POOL_TARGET = 32/POOL_TARGET = '${pool_target}'/g' config.py
  sudo sed -i -e "s/HOSTNAME = ['][a-z]*[a-z][']/HOSTNAME = '${host_id}'/g" #HOSTNAME 
  sudo sed -i -e "s/DB_MYSQL_HOST = ['][a-z]*[a-z][']/DB_MYSQL_HOST = '${db_host}'/g" #DB_MYSQL_HOST
  sudo sed -i -e "s/PASSWORD_SALT = ['][a-z]*[a-z][']/PASSWORD_SALT = '${salt2}'/g" #PASSWORD_SALT	
  sudo sed -i -e "s/COINDAEMON_TRUSTED_HOST = ['][a-z]*[a-z][']/COINDAEMON_TRUSTED_HOST = '${rpc_host}'/g" #COINDAEMON_TRUSTED_HOST
  sudo sed -i -e "s/LISTEN_SOCKET_TRANSPORT = [0-9]*[0-9]/LISTEN_SOCKET_TRANSPORT = ${}/g" config.py #LISTEN_SOCKET_TRANSPORT	
  cd ../..
}

build_stratum_1(){
  cd stratum-mining
  git submodule init
  git submodule update
  ##TODO Direct install to proper coin_type
  cd externals/litecoin_scrypt
  sudo python setup.py install
  cd ../../..
}

build_stratum_2(){
  cd stratum-mining/externals/stratum
  sudo python setup.py install
  cd ../../..
}

git_stratum(){
  git clone https://github.com/Crypto-Expert/stratum-mining.git
  git clone https://github.com/ahmedbodi/stratum.git
  ## Direct install to proper coin_type
}

stratum_exec(){
  juju-log " + Cloning stratum repositories and building..."
  git_stratum && build_stratum_1 && build_stratum_2
  config_stratum && init_stratum && edit_websocket
  finish_apt
  juju-log "   Finishing MPOS!"
}

#################################################################################
# MPOS setup functions
#################################################################################

cron_mpos(){
  cd /var/www/MPOS/cronjobs
  ./run-crons.sh
  cd ${base_dir}
}

config_mpos(){
  cd /var/www/MPOS/public/include/config
  sudo cp global.inc.dist.php global.inc.php
  sudo sed -i -e 's/PLEASEMAKEMESOMETHINGRANDOM/'${salt}'/g' global.inc.php	
  sudo sed -i -e 's/THISSHOULDALSOBERRAANNDDOOM/'${salty}'/g' global.inc.php	
  sudo sed -i -e 's/somepass/'${db_pass}'/g' global.inc.php 	
  sudo sed -i -e 's/someuser/'${db_user}'/g' global.inc.php 

  #TODO Conflicts with any (name']) setting.
  #sudo sed -i -e "s/name[']] = ['][a-z]*[a-z][']/name\'\] = '${db_name}'/g" global.inc.php 
  sudo sed -i -e "s/username[']] = ['][a-z]*[a-z][']/username\'\] = '${mpos_user}'/g" global.inc.php 
  sudo sed -i -e "s/password[']] = ['][a-z]*[a-z][']/password\'\] = '${mpos_pass}'/g" global.inc.php 
  
  #TODO Conflicts with memcache host setting.
  #sudo sed -i -e "s/host[']] = ['][a-z]*[a-z][']/host\'\] = '${db_host}'/g" global.inc.php #['db']['host']

  sudo sed -i -e "s/host[']] = ['][a-z]*[a-z]\:[0-9]*[0-9]/host\'\] = '${MACHINE_ADDRESS}'\:'${rpc_port}'/g" global.inc.php #['wallet']['host']

  #TODO Conflicts with memcache host setting.
  #sudo sed -i -e "s/port[']] = [0-9]*[0-9]/port\'\]  = ${db_port}/g" global.inc.php #['db']['port']

  sudo sed -i -e "s/coinname[']] = ['][a-z]*[a-z][']/coinname\'\] = '${coin_type}'/g" global.inc.php #['gettingstarted']['coinname'] 
  sudo sed -i -e "s/coinurl[']] = ['][a-z]*[a-z][']/coinurl\'\] = '${coin_url}'/g" global.inc.php #['gettingstarted']['coinurl'] 	
  sudo sed -i -e "s/stratumurl[']] = ['][a-z]*[a-z][']/stratumurl\'\] = '${}'/g" global.inc.php #['gettingstarted']['stratumurl']
  sudo sed -i -e "s/stratumport[']] = ['][0-9]*[0-9][']/stratumport\'\] = '${}'/g" global.inc.php #['gettingstarted']['stratumport']

  #TODO Conflicts with any (url']) settings.
  #sudo sed -i -e "s/url[']] = ['][a-z]*[a-z][']/url\'\] = '${}'/g" global.inc.php #['price']['url']	

  #TODO Conflicts with any (target']) setting.
  #sudo sed -i -e "s/target[']] = ['][a-z]*[a-z][']/target\'\] = '${}'/g" global.inc.php #['price']['target'] 

  #TODO Conflicts with currency setting.		
  #sudo sed -i -e "s/currency[']] = ['][a-z]*[a-z][']/currency\'\] = '${}'/g" global.inc.php #['price']['currency'] 
  #sudo sed -i -e "s/[']] = ['][a-z]*[a-z][']/\'\] = '${}'/g" global.inc.php #['currency']
		
  #TODO Conflicts with any (min']) settings.
  #sudo sed -i -e "s/min[']] = [0-9]*[0-9]/min\'\]  = ${}/g" global.inc.php #['ap_threshold']['min']	
  #TODO Conflicts with any (max']) settings.
  #sudo sed -i -e "s/max[']] = [0-9]*[0-9]/max\'\]  = ${}/g" global.inc.php #['ap_threshold']['max']	
		
  sudo sed -i -e "s/cointarget[']] = ['][0-9]*[0-9][']/cointarget\'\] = '${coin_target}'/g" global.inc.php #['cointarget'] 		
  sudo sed -i -e "s/coindiffchangetarget[']] = [0-9]*[0-9]/\'\]  = ${coin_diff_change_target}/g" global.inc.php #['coindiffchangetarget']
  sudo sed -i -e "s/payout_system[']] = ['][a-z]*[a-z][']/payout_system\'\] = '${payout_system}'/g" global.inc.php #['payout_system']

  #TODO Conflicts with any (default']) settings.
  #sudo sed -i -e "s/default[']] = [0-9]*[0-9]/default\'\]  = ${}/g" global.inc.php #['pplns']['shares']['default']
  #sudo sed -i -e "s/default[']] = [0-9]*[0-9]/default\'\]  = ${}/g" global.inc.php #['pps']['reward']['default']
  cd ${base_dir}
}

mpos_sql(){
  juju-log " + Setting MPOS SQL structure..."
  cd /var/www/MPOS
  sudo mysql -u root --password=${db_pass} ${db_name} < sql/000_base_structure.sql
  sudo mysql -u root --password=${db_pass} ${db_name} < sql/013_tokentype_update.sql
  cd ${base_dir}
  juju-log "   Finishing SQL structure!"
}

git_mpos_depends(){
  juju-log " + Setting up MPOS depends..."
  if [ ${coin_type} == "litecoin" ]; then
    git clone https://github.com/Tydus/litecoin_scrypt.git
  elif [ ${coin_type} == "dogecoin" ]; then
    git clone https://github.com/Tydus/litecoin_scrypt.git
  #elif [ ${coin_type} == "bitcoin" ]; then 
  fi
  stratum_exec
  juju-log "   Finishing MPOS depends setup!"
}

git_mpos(){
  juju-log " + Cloning MPOS repository..."
  cd /var/www
  git clone git://github.com/MPOS/php-mpos.git MPOS
  cd MPOS
  git checkout master
  sudo chown -R www-data public/templates/compile public/templates/cache logs
  mpos_sql
  cd ${base_dir}
  git_mpos_depends
  apache2ctl -k stop; sleep 2; sudo apache2ctl -k start
  juju-log "   Finishing MPOS setup!"
}

mpos_exec(){
  juju-log " + Preparing MPOS to initiate..."
  git_mpos && config_mpos
  juju-log "   Finishing. MPOS is started!"
}


#################################################################################
# Main function: start
#################################################################################

coin_exec(){
  juju-log " + Installing "${coin_type}"d... "
  git_${coin_type}d && auth && nohup ${coin_type}d -daemon
  juju-log "   Finished installing "${coin_type}"d. "
}

start_install() {
  juju-log "Starting to install MPOS suite... "
  system_update
  base_dev && coin_exec
  mpos_exec
  system_update
  juju-log "Successfully installed MPOS. "
}
start_install

open-port 80/TCP
open-port 443/TCP
open-port 3333/TCP
open-port ${rpc_port}/TCP
